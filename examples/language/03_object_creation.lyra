// Object creation
//
// Constructing objects in hyve is a two-phase process. First an object is declared after
// which it is defined. This enables doing forward declarations which is required when
// objects contain cyclic references.
//
// An object can get notified of its declaration(initialization) and definition
// (construction). The following example demonstrates this. 
//
// Note that a 'constructor' in hyve is different from typical constructors in object 
// oriented languages. Being a data-centric framework a constructor in hyve has no 
// arguments but the object itself. All that the constructor can use is the information 
// stored in the object, which is a fundamental feature of the framework and absolutely 
// necessary when replicating objects to other hyve instances.
//
// Initializers and constructors are actually delegates of the 'class' metaobject in the
// hyve typesystem. Delegates can be thought of as type-safe function pointers. 

class Foo::
	member x : Foo;
	int16 init(Foo object):
		io::println("Object ${object.nameof()} initialized");
		init = 0; // Initialization was successful
		
	int16 construct(Foo object):
		io::println("Object ${object.nameof()} is constructed with ${object.x.nameof()}");
		construct = 0; // Construction was successful
		
Foo obj1; // Forward declare obj1

Foo obj2 : obj1; // Declare & define obj2

Foo obj1 : obj2; // Define obj2
