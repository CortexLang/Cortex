// Observers
//
// The following example shows how to use class observers.

// Create class with a class observer. A class observer is specified once in the
// class definition and is then instantiated for each instance of the class.
class Point::
	member x,y : uint32;
	
	// This function updates itself, but will not trigger the class observer. By default,
	// updates that originate from an object itself will not be delivered to that object.
	void set(uint32 x, uint32 y):
		update this:
			this.x = x;
			this.y = y;
		
	// Observer triggers only on 'remote' events
	on update this:
		io::println("Class observer: ${this.nameof()} updated to ${this.toString()}");

Point p : 10,20;

// Atomically update two fields of p (simulate a remote event)
update p:
	p.x += 10;
	p.y += 20;

// Call Point::set
p.set(30,40);

// Ordinary observer
on update p:
	io::println("${observable.nameof()} updated to ${observable.toString()}");
