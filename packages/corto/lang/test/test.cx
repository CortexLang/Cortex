#package ::test

int8 initCalled: 0
int8 constructCalled: 0
int8 destructCalled: 0

class Foo::
    fail: bool, local
    x, y: int32
    int16 init()
    int16 construct()
    void destruct()

class Bar::
    int16 init()

struct Point::
    x, y: int32

struct Point3D: Point::
    z: int32

struct Line::
    start, stop: Point

struct PrimitiveCollection::
    ints: list{int32}

struct CompositeCollection::
    points: list{Point}

struct VoidParent: parentType = void::
    foo: int32

struct DefinedParent: parentState = defined ::
    foo: int32

struct DeclaredParent: parentState = declared::
    foo: int32

// Object management testcases
class ObjectMgmt: test::Suite::
    prevAttr: lang::attr, local|private

    void setup()
    void teardown()

    void tc_invalidate() test::Case

    void tc_declareVoid() test::Case
    void tc_declareInt() test::Case
    void tc_declareFoo() test::Case
    void tc_declareVoidAttr0() test::Case
    void tc_declareIntAttr0() test::Case
    void tc_declareFooAttr0() test::Case
    void tc_declareInitFail() test::Case
    void tc_declareNullType() test::Case
    void tc_declareInvalidType() test::Case

    void tc_createVoid() test::Case
    void tc_createInt() test::Case
    void tc_createFoo() test::Case
    void tc_createVoidAttr0() test::Case
    void tc_createIntAttr0() test::Case
    void tc_createFooAttr0() test::Case
    void tc_createInitFail() test::Case
    void tc_createNullType() test::Case
    void tc_createInvalidType() test::Case

    void tc_defineVoid() test::Case
    void tc_defineInt() test::Case
    void tc_defineFoo() test::Case
    void tc_defineVoidAttr0() test::Case
    void tc_defineIntAttr0() test::Case
    void tc_defineFooAttr0() test::Case
    void tc_defineFooFail() test::Case

    void tc_declareChildVoid() test::Case
    void tc_declareChildInt() test::Case
    void tc_declareChildFoo() test::Case
    void tc_declareChildVoidAttr0() test::Case
    void tc_declareChildIntAttr0() test::Case
    void tc_declareChildFooAttr0() test::Case
    void tc_declareChildInitFail() test::Case
    void tc_declareChildParentStateErr() test::Case
    void tc_declareChildParentTypeErr() test::Case
    void tc_declareExistingWithParentState() test::Case
    void tc_declareChildNullType() test::Case
    void tc_declareChildInvalidType() test::Case

    void tc_createChildVoid() test::Case
    void tc_createChildInt() test::Case
    void tc_createChildFoo() test::Case
    void tc_createChildVoidAttr0() test::Case
    void tc_createChildIntAttr0() test::Case
    void tc_createChildFooAttr0() test::Case
    void tc_createChildInitFail() test::Case
    void tc_createChildParentStateErr() test::Case
    void tc_createChildParentTypeErr() test::Case
    void tc_createChildNullType() test::Case
    void tc_createChildInvalidType() test::Case

    void tc_createChildNested() test::Case
    void tc_drop() test::Case

// Generate fully scoped names
class Fullname: test::Suite::
    void tc_root() test::Case
    void tc_onelevel() test::Case
    void tc_twolevels() test::Case
    void tc_null() test::Case
    void tc_nullBuffer() test::Case

// Generate names relative to an object
class RelativeName: test::Suite::
    void setup()
    void teardown()

    tier1: object
    tier2: object
    tier3: object
    obj: object
    disjunct: object
    child: object

    void tc_fromRoot() test::Case
    void tc_fromParent() test::Case
    void tc_fromOneUp() test::Case
    void tc_fromTwoUp() test::Case
    void tc_fromThreeUp() test::Case
    void tc_fromChild() test::Case
    void tc_fromDisjunct() test::Case
    void tc_fromSelf() test::Case

void functionToResolve(int32 a, int32 b)

// Resolve algorithm testcases
class Resolver: test::Suite::
    void setup()
    void teardown()

    void tc_resolveNull() test::Case
    void tc_resolveRoot() test::Case
    void tc_resolveThis() test::Case
    void tc_resolveCorto() test::Case
    void tc_resolveLang() test::Case
    void tc_resolveString() test::Case
    void tc_resolveIo() test::Case
    void tc_resolveAnonymous() test::Case
    void tc_resolveEmptyString() test::Case

    void tc_resolveFunctionNoArgs() test::Case
    void tc_resolveFunctionArgs() test::Case
    void tc_caseInsensitive() test::Case

// Test Event scenarios
class EventTest::
    @scope: object
    lastThis: object, readonly
    lastObservable: object, readonly
    lastSource: object, readonly

    int16 construct()

    observer onDeclare:      ON_DECLARE|ON_SELF|ON_TREE
    observer onDeclareSelf:  ON_DECLARE
    observer onDeclareScope: ON_DECLARE|ON_SCOPE
    observer onDeclareTree:  ON_DECLARE|ON_TREE
    countDeclare: uint32, readonly
    countDeclareSelf: uint32, readonly
    countDeclareScope: uint32, readonly
    countDeclareTree: uint32, readonly

    observer onDefine:       ON_DEFINE|ON_SELF|ON_TREE
    observer onDefineSelf:   ON_DEFINE
    observer onDefineScope:  ON_DEFINE|ON_SCOPE
    observer onDefineTree:   ON_DEFINE|ON_TREE
    countDefine: uint32, readonly
    countDefineSelf: uint32, readonly
    countDefineScope: uint32, readonly
    countDefineTree: uint32, readonly

    observer onUpdate:       ON_UPDATE|ON_SELF|ON_TREE
    observer onUpdateSelf:   ON_UPDATE
    observer onUpdateScope:  ON_UPDATE|ON_SCOPE
    observer onUpdateTree:   ON_UPDATE|ON_TREE
    countUpdate: uint32, readonly
    countUpdateSelf: uint32, readonly
    countUpdateScope: uint32, readonly
    countUpdateTree: uint32, readonly

    observer onDelete:       ON_DELETE|ON_SELF|ON_TREE
    observer onDeleteSelf:   ON_DELETE
    observer onDeleteScope:  ON_DELETE|ON_SCOPE
    observer onDeleteTree:   ON_DELETE|ON_TREE
    countDelete: uint32, readonly
    countDeleteSelf: uint32, readonly
    countDeleteScope: uint32, readonly
    countDeleteTree: uint32, readonly

class Event: test::Suite::
    void setup()
    void teardown()
    
    et: EventTest

    void tc_onDeclare() test::Case
    void tc_onDeclareSelf() test::Case
    void tc_onDeclareScope() test::Case
    void tc_onDeclareTree() test::Case

    void tc_onDefine() test::Case
    void tc_onDefineSelf() test::Case
    void tc_onDefineScope() test::Case
    void tc_onDefineTree() test::Case

    void tc_onUpdate() test::Case
    void tc_onUpdateSelf() test::Case
    void tc_onUpdateScope() test::Case
    void tc_onUpdateTree() test::Case

    void tc_onDelete() test::Case
    void tc_onDeleteSelf() test::Case
    void tc_onDeleteScope() test::Case
    void tc_onDeleteTree() test::Case

// Overloading testcases
void ol_null(object a)
void ol_null(string a)
void ol_null(bool a)

void ol_object(object a)
void ol_string(string a)
void ol_bool(bool a)

void ol_wildcard(int32 a, string b)
void ol_wildcard(float32 a, string b)

void ol_int(int32 a)
void ol_uint(int32 a)

void ol_num(int32 a)
void ol_num(float64 a)

enum Color:: Red, Orange, Yellow, Green, Blue
void ol_any(bool a)
void ol_any(char a)
void ol_any(int32 a)
void ol_any(float32 a)
void ol_any(string a)
void ol_any(object a)
void ol_any(Color a)

class Animal::
    a: bool

class Dog : Animal::
    b: bool

class GoldenRetriever : Dog::
    c: bool

class Cat : Animal::
    b: bool

void ol_inherit(Animal a)
void ol_inherit(Dog a)

class Overload: test::Suite::
    void tc_ambiguous() test::Case
    void tc_ambiguousWildcard() test::Case
    void tc_ambiguousNull() test::Case

    void tc_wildcard() test::Case

    void tc_nullObject() test::Case
    void tc_nullString() test::Case
    void tc_nullBool() test::Case

    void tc_anyChar() test::Case
    void tc_anyInt8() test::Case
    void tc_anyInt16() test::Case
    void tc_anyInt32() test::Case
    void tc_anyInt64() test::Case
    void tc_anyUint8() test::Case
    void tc_anyUint16() test::Case
    void tc_anyUint32() test::Case
    void tc_anyUint64() test::Case
    void tc_anyFloat32() test::Case
    void tc_anyFloat64() test::Case
    void tc_anyOctet() test::Case
    void tc_anyWord() test::Case
    void tc_anyString() test::Case
    void tc_anyColor() test::Case

    void tc_numChar() test::Case
    void tc_numInt8() test::Case
    void tc_numInt16() test::Case
    void tc_numInt32() test::Case
    void tc_numInt64() test::Case
    void tc_numUint8() test::Case
    void tc_numUint16() test::Case
    void tc_numUint32() test::Case
    void tc_numUint64() test::Case
    void tc_numFloat32() test::Case
    void tc_numFloat64() test::Case
    void tc_numOctet() test::Case
    void tc_numWord() test::Case
    void tc_numString() test::Case
    void tc_numColor() test::Case

    void tc_inheritanceBase() test::Case
    void tc_inheritanceSub() test::Case
    void tc_inheritanceMatchSub() test::Case
    void tc_inheritSibling() test::Case
    
// String deserializer testcases
class StringDeserializer: test::Suite::
    void setup()
    void teardown()

    void tc_errMissingType() test::Case
    void tc_errExcessElements() test::Case
    void tc_errUnresolvedType() test::Case
    void tc_errUnresolvedMember() test::Case
    void tc_errNotAType() test::Case
    void tc_errTypeMismatch() test::Case

    void tc_deserExisting() test::Case
    void tc_deserExisting_w_type() test::Case

    void tc_deserBoolTrue() test::Case
    void tc_deserBoolFalse() test::Case
    void tc_deserBoolInvalid() test::Case

    void tc_deserChar() test::Case
    void tc_deserCharQuoted() test::Case
    void tc_deserCharNull() test::Case
    void tc_deserCharNullQuoted() test::Case
    void tc_deserCharEscape() test::Case 
    void tc_deserCharEscapeQuoted() test::Case    

    void tc_deserInt8() test::Case
    void tc_deserInt8Minus() test::Case
    void tc_deserInt8Overflow() test::Case

    void tc_deserInt16() test::Case
    void tc_deserInt16Minus() test::Case
    void tc_deserInt16Overflow() test::Case

    void tc_deserInt32() test::Case
    void tc_deserInt32Minus() test::Case
    void tc_deserInt32Overflow() test::Case

    void tc_deserInt64() test::Case
    void tc_deserInt64Minus() test::Case

    void tc_deserUint8() test::Case
    void tc_deserUint8Overflow() test::Case

    void tc_deserUint16() test::Case
    void tc_deserUint16Overflow() test::Case

    void tc_deserUint32() test::Case
    void tc_deserUint32Overflow() test::Case

    void tc_deserUint64() test::Case

    void tc_deserString() test::Case
    void tc_deserStringQuotes() test::Case
    void tc_deserStringQuotesWhitespaces() test::Case
    void tc_deserStringEscape() test::Case
    void tc_deserStringWhitespace() test::Case
    void tc_deserStringWhitespaceTrailing() test::Case
    void tc_deserStringWhitespaceTrailingNoType() test::Case

    void tc_deserComposite() test::Case
    void tc_deserCompositeNoType() test::Case
    void tc_deserCompositeWhitespace() test::Case
    void tc_deserCompositeMembers() test::Case
    void tc_deserCompositeMixed() test::Case

    void tc_deserCollection() test::Case
    void tc_deserCollectionComplex() test::Case

    void tc_deserInheritance() test::Case
    void tc_deserInheritanceMembers() test::Case
    void tc_deserInheritanceMixed() test::Case

    void tc_deserCompositeNested() test::Case
    void tc_deserCompositeNestedMembers() test::Case
    void tc_deserCompositeNestedMixed() test::Case
