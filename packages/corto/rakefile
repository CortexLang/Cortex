PACKAGE = 'corto'

LIB = ['rt', 'dl', 'm', 'ffi']
LIB_PUBLIC = [] # projects don't need to link with rt, dl and m
CFLAGS ||= ["-Wunused-parameter"]

# Bootstrap: can't build corto packages without corto
NOCORTO = true

# Rebuild corto.c and loader.c for every artefact so that they are aware of
# whether the library is redistributable
ALWAYS_REBUILD = ["src/corto.c", "src/loader.c"]

# When building a tar for the core, also include the build system
task :collect do
    verbose(false)
    buildPath = "#{ENV['HOME']}/.corto/pack/lib/corto/#{CORTO_VERSION}/build"
    sh "mkdir -p #{buildPath}"
    sh "cp -r #{ENV['CORTO_BUILD']}/* #{buildPath}/"
end

task :prebuild do
  # When rebuilding corto, remove corto tool to avoid library conflicts when old
  # tool is built against a library in a different location.
  sh "rm -f #{CORTO_TARGET}/bin/corto"
end

task :postbuild do
  if ENV['binaries'] != "false" then
     # Create link to installed corto tool from local environment so that
     # existing shells that cached the location of the corto executable
     # still work.
    if ENV['CORTO_INSTALLFROM'] then
      sh "rm -f #{ENV['CORTO_INSTALLFROM']}/bin/corto\n"
      sh "ln -s #{ENV['CORTO_TARGET']}/bin/corto #{ENV['CORTO_INSTALLFROM']}/bin/corto\n"
    end
  end
end

require "#{ENV['CORTO_BUILD']}/package"
