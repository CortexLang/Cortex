#package ::testjson


void primitives::
    void ints::
        // TODO how to handle overflow
        int8 maxInt8: 127
        int8 posInt8: 45
        int8 zeroInt8: 0
        int8 negInt8: -5
        int8 minInt8: -128

        int16 maxInt16: 32767
        int16 posInt16: 5656
        int16 zeroInt16: 0
        int16 negInt16: -234
        int16 minInt16: -32768

        int32 maxInt32: 2147483647
        int32 posInt32: 4353456
        int32 zeroInt32: 0
        int32 negInt32: -8978284
        int32 minInt32: -2147483648

        int64 maxInt64: 9223372036854775807
        int64 posInt64: 567453
        int64 zeroInt64: 0
        int64 negInt64: -5345345
        int64 minInt64: -9223372036854775807 // -1 compiler complains

    void uints::
        uint8 maxUint8: 255
        uint8 PosUint8: 87
        uint8 zeroUint8: 0

        uint16 maxUint16: 65535
        uint16 PosUint16: 678
        uint16 zeroUint16: 0

        uint32 maxUint32: 4294967295
        uint32 PosUint32: 98379874
        uint32 zeroUint32: 0

        uint64 maxUint64: 18446744073709551615
        uint64 PosUint64: 567453
        uint64 zeroUint64: 0

    void texts::
        string empty:  ""
        string alpha: "Hello"
        string num: "455"
        string punctuation: "Hello world!"
        string escaped: "Hello \\ \"world\""


class BaseTestJson: test::Suite::
    member serializer: word, private|local
    member jsonData: word, private|local
    void setUp() virtual
    void tearDown() virtual
    void testJson(string fullname, string expected)


class TestJsonValue: BaseTestJson::
    void setUp() virtual
    void tearDown() virtual


class TestJsonInt: TestJsonValue ::
    void testMaxInt8() test::Case
    void testPosInt8() test::Case
    void testZeroInt8() test::Case
    void testNegInt8() test::Case
    void testMinInt8() test::Case

    void testMaxInt16() test::Case
    void testPosInt16() test::Case
    void testZeroInt16() test::Case
    void testNegInt16() test::Case
    void testMinInt16() test::Case

    void testMaxInt32() test::Case
    void testPosInt32() test::Case
    void testZeroInt32() test::Case
    void testNegInt32() test::Case
    void testMinInt32() test::Case

    void testMaxInt64() test::Case
    void testPosInt64() test::Case
    void testZeroInt64() test::Case
    void testNegInt64() test::Case
    void testMinInt64() test::Case


class TestJsonUint: TestJsonValue::
    void testMaxUint8() test::Case
    void testPosUint8() test::Case
    void testZeroUint8() test::Case

    void testMaxUint16() test::Case
    void testPosUint16() test::Case
    void testZeroUint16() test::Case

    void testMaxUint32() test::Case
    void testPosUint32() test::Case
    void testZeroUint32() test::Case

    void testMaxUint64() test::Case
    void testPosUint64() test::Case
    void testZeroUint64() test::Case


class TestJsonText: TestJsonValue::
    void testEmpty() test::Case
    void testAlpha() test::Case
    void testNum() test::Case
    void testPunctuation() test::Case
    void testEscaped() test::Case


class TestJsonScope: BaseTestJson::
    void setUp() virtual
    void tearDown() virtual

class BaseDeserializeJsonTest: test::Suite::
    o: object
    bool testName(string name)
    bool testParent(object parent)
    bool testType(type type)
    bool testNameParentType(string name, object parent, type type)

class BaseDeserializeJsonPrimitiveTest: BaseDeserializeJsonTest::
    void testValue()

class DeserializeJsonPrimitiveTest: BaseDeserializeJsonPrimitiveTest::
    void setUp()
    void testUint8() test::Case
