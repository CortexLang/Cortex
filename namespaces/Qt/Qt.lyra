object Qt::
	// real
	typedef real : float64;
	
	// Qt slot
	class slot : hyve::lang::member::
		int16 construct(slot object);
	
	// Orientation
	enum Orientation::
		constant Horizontal : 0x1;
		constant Vertical : 0x2;
		
	// Alignment
	enum Alignment::
		constant AlignLeft : 0x1;
		constant AlignRight : 0x2;
		constant AlignHCenter : 0x4;
		constant AlignJustify : 0x8;
		constant AlignTop : 0x20;
		constant AlignBottom : 0x40;
		constant AlignVCenter : 0x80;
		constant AlignCenter : AlignVCenter|AlignHCenter;
	
	// Point
	struct Point::
		member x : int32;
		member y : int32;
	
	// Point (floating point)
	struct PointF::
		member x : Qt::real;
		member y : Qt::real;
	
	// Line
	struct Line::
		member x1 : uint32;
		member y1 : uint32;
		member x2 : uint32;
		member y2 : uint32;
		
	// Line (floating point)
	struct LineF::
		member x1 : Qt::real;
		member y1 : Qt::real;
		member x2 : Qt::real;
		member y2 : Qt::real;

	// Rectangle
	struct Rect::
		member left : uint32;
		member top : uint32;
		member width : uint32;
		member height : uint32;
		
	// Rectangle (floating point)
	struct RectF::
		member left : Qt::real;
		member top : Qt::real;
		member width : Qt::real;
		member height : Qt::real;
				
	// Color
	struct Color::
		member r : uint8;
		member g : uint8;
		member b : uint8;
		member alpha : uint8;
		
	// Base class for Qt objects
	class Object::
		member qhandle : word,LOCAL|PRIVATE; // Handle to Qt object
		lang::word widgetParent(); // Return parent-handle of the widget
		
	// Font weight
	enum FontWeight::
		constant Light : 25;
		constant Normal : 50;
		constant DemiBold : 63;
		constant Bold : 75;
		constant Black : 87;
		
	// Font
	class Font : Object::
		int16 construct(Font object);
		void destruct(Font object);
		member family : string;
		member pointSize : int32;
		member weight : FontWeight;
		member italic : lang::bool;
		
	// Gradient kind
	enum GradientKind::
		constant Linear;
		constant Radial;
		constant Conical;
		
	// Gradient stop
	struct GradientStop::
		member pos : Qt::real;
		member color : Qt::Color;
	
	// Gradient coordinate mode
	enum GradientCoordinateMode::
		constant LogicalMode : 0;
		constant StretchToDeviceMode : 1;
		constant ObjectBoundingMode : 2;
		
	// Gradient spread
	enum GradientSpread::
		constant PadSpead : 0;
		constant ReflectSpread : 1;
		constant RepeatSpread : 2;		
		
	// Gradient
	class Gradient : Object::
		member kind : GradientKind,LOCAL|READONLY;
		member stops : sequence{GradientStop};
		member coordinateMode : GradientCoordinateMode;
		member spread : GradientSpread;
		
	// Lineair gradient
	class LinearGradient : Gradient::
		int16 init(Qt::LinearGradient object);
		member start : Qt::PointF;
		member finalStop : Qt::PointF;
		
	// Radial gradient
	class RadialGradient : Gradient::
		int16 init(Qt::RadialGradient object);
		member center : Qt::PointF;
		member focalPoint : Qt::PointF;
		member radius : Qt::real;
		
	// Conical gradient
	class ConicalGradient : Gradient::
		int16 init(Qt::ConicalGradient object);
		member angle : Qt::real;
		member center : Qt::PointF;
		
	// PaintDevice
	interface PaintDevice:;
	
	// Brush
	class Brush : Object::
		int16 construct(Brush object);
		void destruct(Brush object);
		member color : Qt::Color;
		member gradient : Qt::Gradient;
		
	// Pen
	class Pen : Object::
		int16 construct(Pen object);
		void destruct(Pen object);
		member color : Qt::Color;
		member width : lang::uint32;
		
	// Object that allows painting within a paintEvent
	class Painter : Object::
		int16 construct(Painter object);
		void destruct(Painter object);
		member device : Qt::PaintDevice;
		member brush : Qt::Brush;
		member pen : Qt::Pen;
		void begin();
		void end();
		void drawEllipse(Rect rect);
		void drawEllipse(RectF rect);
		void drawEllipse(int32 x, int32 y, int32 r);
		void drawEllipse(float64 x, float64 y, float64 r);
		void drawEllipse(int32 top, int32 left, int32 width, int32 height);
		void drawEllipse(Qt::real top, Qt::real left, Qt::real width, Qt::real height);
		void drawLines(sequence{Line} lines);
		void drawLines(sequence{LineF} lines);
		void drawLine(Line line);
		void drawLine(LineF line);
		void drawLine(Qt::real x1, Qt::real y1, Qt::real x2, Qt::real y2);
		void drawLine(int32 x1, int32 y1, int32 x2, int32 y2);
		void drawPoints(sequence{Point} lines);
		void drawPoints(sequence{PointF} lines);
		void drawPoint(Point point);
		void drawPoint(PointF point);
		void drawRect(Rect rect);
		void drawRect(RectF rect);
		void drawRect(int32 left, int32 top, int32 width, int32 height);
		void drawRect(Qt::real left, Qt::real top, Qt::real width, Qt::real height);
		void drawRoundedRect(Rect rect, Qt::real xradius, Qt::real yradius);
		void drawRoundedRect(RectF rect, Qt::real xradius, Qt::real yradius);
		void drawRoundedRect(int32 left, int32 top, int32 width, int32 height, Qt::real xradius, Qt::real yradius);
		void drawRoundedRect(Qt::real left, Qt::real top, Qt::real width, Qt::real height, Qt::real xradius, Qt::real yradius);
		void drawRoundedRect(Rect rect, Qt::real radius);
		void drawRoundedRect(RectF rect, Qt::real radius);
		void drawRoundedRect(int32 left, int32 top, int32 width, int32 height, Qt::real radius);
		void drawRoundedRect(Qt::real left, Qt::real top, Qt::real width, Qt::real height, Qt::real radius);
		void drawRects(sequence{Rect} rects);
		void drawRects(sequence{RectF} rects);
		void drawText(Qt::Point position, lang::string text);
		void drawText(Qt::PointF position, lang::string text);
		void drawText(Qt::Rect position, Qt::Alignment alignment, lang::string text);		
		void drawText(Qt::RectF position, Qt::Alignment alignment, lang::string text);
		void translate(int32 x, int32 y);
		void translate(Point p);
		void translate(Qt::real x, Qt::real y);
		void translate(PointF p);
		void save();
		void restore();
		void scale(Qt::real sx, Qt::real sy);
		void setBrush(Qt::Brush brush);
		void setPen(Qt::Pen pen);
		void setFont(Qt::Font font);
		Rect viewport();		

	// paintEvent
	class paintEvent_t::
		member painter : Qt::Painter;
		
	// This enum describes the different mouse buttons
	bitmask MouseButton::
		constant NoButton : 0x0;
		constant LeftButton : 0x1;
		constant RightButton : 0x2;
		constant MidButton : 0x4;
		constant MiddleButton : MouseButton::MidButton;
		constant XButton1 : 0x8;
		constant XButton2 : 0x10;

	// KeyboardModifiers
	bitmask KeyboardModifiers::
		constant NoModifier : 0x0;
		constant ShiftModifier : 0x02000000;
		constant ControlModifier : 0x04000000;
		constant AltModifier : 0x08000000;
		constant MetaModifier : 0x10000000;
		constant KeypadModifier : 0x20000000;
		constant GroupSwitchModifier : 0x40000000;
		
	// inputEvent
	class inputEvent_t ::
		member modifiers : KeyboardModifiers;
	
	// mouseEvent
	class mouseEvent_t : inputEvent_t::
		member x : int32;
		member y : int32;
		member buttons : MouseButton;

	// Widget		
	class Widget : implements:{Qt::PaintDevice} base:Qt::Object::
		// Initializer, constructor, destructor
		int16 init(Widget object);
		int16 construct(Widget object);
		void destruct(Widget object);
		
		// Slots
		slot paintEvent : Qt::paintEvent_t,READONLY;
		slot mousePressEvent : Qt::mouseEvent_t,READONLY;
		
		// Members
		member x : int32;
		member y : int32;
		member width : int32;
		member height : int32;
		member enabled : bool;
		member visible : bool;
		member styleSheet : lang::string;
		member painter : Qt::Painter,LOCAL|PRIVATE|READONLY;
		member qslots : word,LOCAL|PRIVATE; // Handle to persistent C++ object that manages signal\slot connectivity
		
		// Methods
		void show();
		void hide();
		
		// Methods
		void repaint();
		
	// Qt application
	class Application : implements:{dispatcher} base:Qt::Object::
		int16 init(Application object);
		int16 construct(Application object);
		void destruct(Application object);
		void exec();
		void post(lang::event event);
		lang::observableEvent getEvent(lang::observer observer, lang::object me, lang::object observable, lang::object src);
		member arg : sequence{string};
		member stylesheet : string;
		
	// Provides main application window
	class MainWindow : Widget::
		int16 construct(MainWindow object);
		void destruct(MainWindow object);
		member title : string;
		member cw : word,LOCAL|PRIVATE; // Handle to central widget
		observer onSelf : mask:ON_UPDATE|ON_SELF;
		
	// Provides text display
	class Label : Widget ::
		int16 init(Label object);
		int16 construct(Label object);
		void destruct(Label object);
		void setText(string text);
		member text : string;
		member alignment : Qt::Alignment;
		observer onSelf : mask:ON_UPDATE|ON_SELF;
		
	// Provides groupbox
	class GroupBox : Widget::
		int16 construct(GroupBox object);
		void destruct(GroupBox object);
		member title : string;

	// Slider widget
	class Slider : Widget::
		int16 construct(Slider object);
		void destruct(Slider object);	
		member value : int32;
		member minimum : int32;
		member maximum : int32;
		member singleStep : int32;
		member orientation : Qt::Orientation;
		observer onSelf : mask:ON_UPDATE|ON_SELF;

	// Base class for button widgets
	class AbstractButton : Widget::
		int16 construct(AbstractButton object);
		void destruct(AbstractButton object);
		member text : string;
		member checkable : bool;
		member down : bool;
		member checked : bool;
		
	// Provides a command button
	class PushButton : AbstractButton::
		int16 construct(PushButton object);
		void destruct(PushButton object);
		observer onSelf : mask:ON_UPDATE|ON_SELF;

	// Provides a radio button with a text label
	class RadioButton : AbstractButton::
		int16 construct(RadioButton object);
		void destruct(RadioButton object);
		observer onSelf : mask:ON_UPDATE|ON_SELF;
		
	// Provides a checkable button with a text label
	class CheckBox : AbstractButton::
		int16 construct(CheckBox object);
		void destruct(CheckBox object);
		observer onSelf : mask:ON_UPDATE|ON_SELF;		
		
	// A one-line text editor.
	class LineEdit : Widget::
		member text : string;
		member readonly : bool;
		int16 construct(LineEdit object);
		void destruct(LineEdit object);
		observer onSelf : mask:ON_UPDATE|ON_SELF;
		
	// A combined button and popup list.
	class ComboBox : Widget::
		member items : list{string};
		member currentIndex : uint32;
		member currentText : string,LOCAL|READONLY;
		int16 construct(ComboBox object);
		void destruct(ComboBox object);
		observer onSelf : mask:ON_UPDATE|ON_SELF;
		
	// Combobox that represents the constants in an enumeration
	class EnumComboBox : ComboBox ::
		int16 construct(EnumComboBox object);
		void destruct(EnumComboBox object);
		member type : lang::enum;
		member value : lang::constant;
		
	// A widget displaying a list
	class ListWidget : Widget::
		member items : list{string};
		member currentIndex : uint32;
		member currentText : string;
		int16 construct(ListWidget object);
		void destruct(ListWidget object);
		void insertItem(string label);
		observer onSelf : mask:ON_UPDATE|ON_SELF;
		
	// TabWidgetTab
	struct TabWidgetTab::
		member label : string;
		member widget : Qt::Widget;		
		
	// TabWidget
	class TabWidget : Widget::
		member tabs : list{Qt::TabWidgetTab};
		member closable : bool;
		member movable : bool;
		member currentIndex : uint32;
		member currentWidget : Qt::Widget;
		member count : uint32;
		int16 construct(TabWidget object);
		void destruct(TabWidget object);
		void addTab(string label, Qt::Widget widget);
		
	// GridRow
	struct GridRow::
		member stretch : uint32;
		member minimumHeight : uint32;
		
	// GridColumn
	struct GridColumn::
		member stretch : uint32;
		member minimumWidth : uint32;
		
	// GridWidget
	struct GridWidget::
		member widget : Qt::Widget;
		member row : uint32;
		member column : uint32;
		member rowspan : uint32;
		member columnspan : uint32;
		
	// Gridlayout
	class GridLayout : Object::
		member rows : sequence{GridRow};
		member columns : sequence{GridColumn};
		member widgets : sequence{GridWidget};
		int16 construct(GridLayout object);
		void destruct(GridLayout object);
		observer onSelf : mask:ON_UPDATE|ON_SELF;
		
	// Represents an item in a splitter widget
	struct SplitterItem::
		member widget : Qt::Widget;
		member width : uint32;
		member stretch : uint32;

	// Splitter
	class Splitter : Widget::
		member widgets : sequence{SplitterItem};
		int16 init(Splitter object);
		int16 construct(Splitter object);
		void destruct(Splitter object);
		member orientation : Qt::Orientation;
		observer onSelf : mask:ON_UPDATE|ON_SELF;
		
	// ProgressBar
	class ProgressBar : Widget::
		int16 construct(ProgressBar object);
		void destruct(ProgressBar object);
		observer onSelf : mask:ON_UPDATE|ON_SELF;
		member minimum : int32;
		member maximum : int32;
		member value : int32;
		member orientation : Qt::Orientation;
		member text : string;
		member format : string;
	
	// Display object hierarchy in tree
	class ObjectTree : Widget::
		int16 construct(ObjectTree object);
		void destruct(ObjectTree object);
		int16 init(ObjectTree object);
		member scope : lang::object;
		member object : lang::object;		
		observer onNew : "::",ON_DECLARE|ON_SELF|ON_CHILDS;
		observer onConstruct : "::",ON_DEFINE|ON_SELF|ON_CHILDS;
		observer onDestruct : "::",ON_DESTRUCT|ON_SELF|ON_CHILDS;
		observer onSelf : mask:ON_UPDATE|ON_SELF;
		
	// Display value of objects
	class ObjectView : Widget::
		int16 init(ObjectView object);
		int16 construct(ObjectView object);
		void destruct(ObjectView object);
		void setObject(lang::object object);
		void updateObject();
		member object : lang::object;
		member expr : lang::string;
		member showHeaders : lang::bool;
		member fields : sequence{lang::string};
		member selected : lang::string,READONLY;
		member selectedElement : lang::uint32,READONLY;
		observer onUpdate : null,ON_UPDATE|ON_SELF;
		observer onDestruct : null,ON_DESTRUCT|ON_SELF;
		observer onSelf : mask:ON_UPDATE|ON_SELF;
		
	// Display structure of objects and translates to expression
	class ObjectBrowse : Widget::
		int16 construct(ObjectBrowse object);
		void destruct(ObjectBrowse object);
		void setObject(lang::object object);
		member object : lang::object;
		member prevObject : lang::object,LOCAL|PRIVATE;
		member expr : lang::string;
		member showPrimitives : lang::bool;
		observer onUpdate : null,ON_UPDATE|ON_SELF;
		observer onDestruct : "::",ON_DESTRUCT|ON_SELF|ON_CHILDS;
		observer onSelf : mask:ON_UPDATE|ON_SELF;
		
	enum TileMode ::
		constant TileNone;		// Showing nothing
		constant TileSmall;		// Showing color, type
		constant TileNormal;	// Showing color, name, type
		constant TileLarge;		// Showing color, name, type, tiny childs
		
	// Display hierarchically organized tiles
	class Tile : Widget::
		int16 construct(Tile object);
		void destruct(Tile object);
		int16 init(Tile object);
		void pulse(uint8 r, uint8 g, uint8 b, uint8 alpha);
		member title : lang::string;
		member textColor : Qt::Color;
		member foregroundColor : Qt::Color;
		member backgroundColor : Qt::Color;
		member mode : TileMode, READONLY;
		member isRoot : lang::bool, PRIVATE;
		member rootTile : Tile, PRIVATE;
		member scope : lang::word, PRIVATE;
		observer onSelf : null,ON_SELF|ON_UPDATE;
		observer onDefine : null,ON_CHILDS|ON_DEFINE;
		observer onDestruct : null,ON_CHILDS|ON_DESTRUCT; // Notify destruction of tiles
		
	class ObjectTile : Tile::
		int16 construct(ObjectTile object);
		void destruct(ObjectTile object);
		member scope : lang::string;
		member scopeCache : lang::word; // Weak reference
		virtual ObjectTile createTile(lang::object obj);
		observer onNew : null,ON_DECLARE|ON_SELF;
		observer onDestruct : null,ON_DESTRUCT|ON_SELF; // Notify destruction of scope
	
	// A widget for plotting
	class CustomPlot : Widget::
		int16 init(CustomPlot object);
		int16 construct(CustomPlot object);
		int16 destruct(CustomPlot object);
		observer onUpdate : null,ON_UPDATE|ON_SELF;
		observer onDestruct : null,ON_UPDATE|ON_SELF;
		observer onSelf : mask:ON_UPDATE|ON_SELF;
		member object : lang::object;
		member expr : lang::string;
		member autoX : lang::uint32;
		
	
	