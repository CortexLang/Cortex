// Test metaprocedures of type class and hyve scope
bool result: true;
void fail(string msg):
	"tc_metaprocedure01: FAIL: $msg";
	result = false;

// Create a class using only metaprocedures
var object cl = @::.declare("Point", class);
if !cl: fail("declaration of class Point failed");

// Define members
(member(cl.declare("x", member)) = {uint32}).define();
(member(cl.declare("y", member)) = {uint32}).define();

// Validate state and attributes
if cl.checkState(state::DEFINED): fail("cl.checkState(state::DEFINED)");
if !cl.checkAttr(attr::ATTR_SCOPED): fail("!cl.checkAttr(state::SCOPED)");

// Define class and check defined state
if cl.define(): fail("failed to define class Point");
if !cl.checkState(state::DEFINED): fail("!cl.checkState(state::DEFINED)");

// Create an instance with the class=
var object o = @::.declare("q", class(cl));
if !o: fail("declaration of instance o failed");
if o.define(): fail("failed to define instance o");

// Test resolving objects
var object r = @::.resolve("Point");
if r != cl: fail("r != cl");

r = @::.resolve("q");
if r != o: fail("r != o");

r = @::.lookup("Point");
if r != cl: fail("r != cl #2");

r = @::.lookup("q");
if r != o: fail("r != q #2");

var object n = new(uint32);
if !n: fail("!n");
if !n.checkState(state::DEFINED): fail("!n.checkState(state::DEFINED)"); // primitives are instantly defined

if result: "tc_metaprocedure01: OK";
