in package test

test/Suite Util:/
    void tc_ulltoa()

// Test environment variable parsing functions
test/Suite Env:/
    void tc_envparseSimpleFormat()
    void tc_envparseSimpleReplace()
    void tc_envparseReplaceMultiple()
    void tc_envparseReplaceWithSameVariable()
    void tc_envparseFormatAndReplace()
    void tc_envparseVariableNotFound()

    void tc_setenvSimple()
    void tc_setenvSimpleFormat()
    void tc_setenvSimpleReplace()
    void tc_setenvReplaceMultiple()
    void tc_setenvReplaceWithSameVariable()
    void tc_setenvFormatAndReplace()
    void tc_setenvVariableNotFound()
    void tc_setenvNull()

// Test buffer implementation
test/Suite Buffer:/
    void tc_append()
    void tc_appendToExisting()
    void tc_appendEmpty()
    void tc_appendEmptyToExisting()
    void tc_appendNull()
    void tc_appendNullToExisting()
    void tc_appendLarge()
    void tc_appendLargeMulti()
    void tc_appendLargeOverflow()
    void tc_appendOverflow()

// Test matcher
test/Suite Matcher:/
  void tc_emptyString()              // '' => *
  void tc_null()                     // null => *
  void tc_scopeEmptyString()         // '' => *
  void tc_scopeNull()                // null => *
  void tc_treeEmptyString()          // '' => *
  void tc_treeNull()                 // null => *
  void tc_id()                       // a => a
  void tc_idFail()                   // a => b
  void tc_idOr()                     // a => a|b
  void tc_idOrFail()                 // c => a|b
  void tc_idOrMulti()                // a => a|b|c|d|e|f
  void tc_idOrMultiFail()            // g => a|b|c|d|e|f
  void tc_idAnd()                    // a => a&a
  void tc_idAndFail()                // a => a&b
  void tc_idNot()                    // a => ^b
  void tc_idNotFail()                // b => ^b
  void tc_idNotOr()                  // a => ^b|c
  void tc_idNotOrFail()              // a => ^a|b
  void tc_idNotAnd()                 // a => ^a&b
  void tc_idNotAndFail()             // a => ^a&a
  void tc_filterIdA()                // ax => a*
  void tc_filterIdAFail()            // bx => a*
  void tc_filterIdQ()                // ax => a?
  void tc_filterIdQFail()            // bx => a?
  void tc_filterA()                  // ax => *
  void tc_filterQQ()                 // ax => ??
  void tc_filterQFail()              // ax => ?
  void tc_filterQQFail()             // a => ??
  void tc_filterQA()                 // ax => ?*
  void tc_filterAQ()                 // ax => *?
  void tc_filterFail()               // ax => b*
  void tc_filterOr()                 // ax => a*|b*
  void tc_filterOrFail()             // cx => a*|b*
  void tc_filterAnd()                // ax => a*&*x
  void tc_filterAndFail()            // ax => a*&*y
  void tc_filterNot()                // ax => ^b*
  void tc_filterNotFail()            // bx => ^b*
  void tc_filterNotOr()              // ax => ^b*|c*
  void tc_filterNotOrFail()          // ax => ^a*|b*
  void tc_filterNotAnd()             // ax => ^a*&*y
  void tc_filterNotAndFail()         // ax => ^a*&*x
  void tc_filterNotFilter()          // ax => *x^b*
  void tc_filterNotFilterFail()      // ax => *x^a*
  void tc_separatorId()              // [a,b] => a,b
  void tc_separatorIdFail()          // c => a,b
  void tc_separatorFilter()          // ax => b*,*x
  void tc_separatorFilterFail()      // ax => b*,*y
  void tc_separatorNotFilter()       // ax => ^b*,*y
  void tc_separatorNotFilterFail()   // ax => ^a*,*y
  void tc_scopeId()                  // /a => /a
  void tc_scopeFilter()              // /a => /*
  void tc_scopeImplicit()            // /a => /
  void tc_scopeIdFail()              // /a => /b
  void tc_scopeIdMulti()             // /a/b => /a/b
  void tc_scopeIdMultiFail()         // /a/b => /a/c
  void tc_scopeFilter()              // /ax => /a*
  void tc_scopeFilterFail()          // /ax => /b*
  void tc_scopeImplicitFail()        // a => /
  void tc_scopeOr()                  // /a => /a|b
  void tc_scopeOrFail()              // /a/c => /a/b|c
  void tc_scopeOrMulti()             // /a/b => /a/b|c
  void tc_scopeOrMultiFail()         // /a/d => /a/b|c
  void tc_scopeFilterMulti()         // /ax/b => /*x/b
  void tc_scopeFilterMultiFail1()    // /ax/b => /*y/b
  void tc_scopeFilterMultiFail2()    // /ax/b => /*x/c
  void tc_scopeIdMultiSingleFail()   // /a/b => /a
  void tc_scopeIdSingleMultiFail()   // /a => /a/b
  void tc_scopeFilterSingleMultiFail() // /a => /a/*
  void tc_scopeFilterMultiSingleFail() // /a/b => /*
  void tc_treeId()                   // /a => //a
  void tc_treeImplicit()             // /a => //
  void tc_treeFilter()               // /a => //*
  void tc_treeIdFail()               // /a => //b
  void tc_treeImplicitFail()         // a => //
  void tc_treeFilterFail()           // /a* => //b
  void tc_treeNested()               // /a/b => //b
  void tc_treeNestedFail()           // /a/b => //a
  void tc_treeNestedScope()          // /a/b/c => //b/c
  void tc_treeNestedScopeFail()      // /a/b/d => //b/c
  void tc_treeOffset()               // /a/b/c => a//c
  void tc_treeOffsetFail()           // /a => a//
  void tc_treeOffsetNested()         // /a/b/c/d => /a/b//d
  void tc_treeOffsetNestedFail()     // /b/c/d => /a/b//d
  void tc_treeOffsetAny()            // /a/b/c => /a//
  void tc_treeOffsetAnyFail()        // /a => /a//
  void tc_treeOffsetOr()             // /b/c/d => /a|b//d
  void tc_treeOffsetOrFail()         // /c/c/d => /a|b//d
